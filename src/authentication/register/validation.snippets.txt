import {FormControl} from "@angular/forms";
import {AuthenticationService} from "../authentication.service";

emailOrPhoneValidator(authenticationService:AuthenticationService) {

  var isValidUsername = false;
  var newUsernameValue:string;
  var oldUsernameValue:string;

  return (c:FormControl) => {

    let valueChanges = c.valueChanges;
    // initially value changes is undefined
    if (valueChanges && !this.hasUsernameListener) {
      this.hasUsernameListener = true;
      valueChanges
        .debounceTime(400)
        .distinctUntilChanged()
        .filter(value => { // filter out empty values
          return !!(value);
        }).map(value => {
        return authenticationService.isValidUsername(value);
      }).subscribe(value => {
        value.subscribe( otherValue => {
          console.log(otherValue);
          isValidUsername = otherValue;
          console.log("In isValid " + isValid);
          c.updateValueAndValidity();
        }, error => {
          console.log(error);
        });
      }, error2 => {
        console.log(error2);
      }, () => {
        console.log("emailOrPhoneValidator - ÃŸcomplete")
      });
    }

    console.log("Out isValidUsername " + isValidUsername);

    return isValidUsername ? null : {
      validateEmail: {
        valid: false
      }
    };
  };
}


  emailOrPhoneValidator2(authenticationService:AuthenticationService) {
    return (c:FormControl) => {
      return authenticationService
        .isValidUsername(c.value)
        .debounceTime(500)
        .take(1)
        .map(value => {
          return value ? null : {
            validateEmail: {
              valid: true
            }
          }
        });
    };
  }

  emailOrPhoneValidator3(authenticationService:AuthenticationService) {
    return (c:FormControl) => {
      return new Observable(observer => {
        authenticationService
          .isValidUsername(c.value)
          .take(1)
          .map(value => {
            return value ? null : {
              validateEmail: {
                valid: true
              }
            }
        }).subscribe(value => {
          observer.next(value)
        }, error => {
          observer.error(null)
        });
      }).take(1).map(c => {
        return c;
      });
    }
  }